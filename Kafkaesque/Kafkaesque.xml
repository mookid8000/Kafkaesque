<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kafkaesque</name>
    </assembly>
    <members>
        <member name="T:Kafkaesque.ILogger">
            <summary>
            Implement to catch logs from Kafkaesque
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Verbose(System.String)">
            <summary>
            Logs at the most verbose level
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Verbose(System.Exception,System.String)">
            <summary>
            Logs at the most verbose level
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Information(System.String)">
            <summary>
            Logs information
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Information(System.Exception,System.String)">
            <summary>
            Logs information
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Warning(System.String)">
            <summary>
            Logs a warning
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Warning(System.Exception,System.String)">
            <summary>
            Logs a warning
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Error(System.String)">
            <summary>
            Logs an error
            </summary>
        </member>
        <member name="M:Kafkaesque.ILogger.Error(System.Exception,System.String)">
            <summary>
            Logs an error
            </summary>
        </member>
        <member name="T:Kafkaesque.LogDirectory">
            <summary>
            Create an instance of this one to get started with Kafkaesque
            </summary>
        </member>
        <member name="M:Kafkaesque.LogDirectory.#ctor(System.IO.DirectoryInfo,Kafkaesque.Settings)">
            <summary>
            Creates a log directory, using the directory specified by <paramref name="directoryInfo"/> to store the files.
            </summary>
        </member>
        <member name="M:Kafkaesque.LogDirectory.#ctor(System.String,Kafkaesque.Settings)">
            <summary>
            Creates a log directory, using the directory specified by <paramref name="directoryPath"/> to store the files.
            </summary>
        </member>
        <member name="M:Kafkaesque.LogDirectory.GetWriter(System.Threading.CancellationToken)">
            <summary>
            Gets a log writer. This requires exclusive access to the log directory, so it will acquire a file-based lock on it.
            If the lock cannot be acquired within 20 s, a <see cref="T:System.TimeoutException"/> is thrown.
            Optionally pass a <paramref name="cancellationToken"/> if you want to be able to abort the acquisition attempt
            prematurely.
            </summary>
        </member>
        <member name="M:Kafkaesque.LogDirectory.GetReader">
            <summary>
            Gets a log reader.
            </summary>
        </member>
        <member name="T:Kafkaesque.LogEvent">
            <summary>
            Represents on single log event (in the form of a byte array) along with the position
            from which to resume reading in order to read the next event and on
            </summary>
        </member>
        <member name="P:Kafkaesque.LogEvent.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:Kafkaesque.LogEvent.FileNumber">
            <summary>
            Gets the file number
            </summary>
        </member>
        <member name="P:Kafkaesque.LogEvent.BytePosition">
            <summary>
            Gets the position of the underlying stream
            </summary>
        </member>
        <member name="M:Kafkaesque.LogEvent.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructs the log event
            </summary>
        </member>
        <member name="T:Kafkaesque.LogReader">
            <summary>
            Log reader for reading logs :)
            </summary>
        </member>
        <member name="M:Kafkaesque.LogReader.Read(System.Int32,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Initiates a read operation. Optionally resumes from a specific file number/byte position.
            Reading is cancelled when the <paramref name="cancellationToken"/> is signaled. If <paramref name="throwWhenCancelled"/> is true,
            an <see cref="T:System.OperationCanceledException"/> is thrown upon cancellation - if it's false, then the iterator simply breaks.
            Otherwise, reading will proceed, possibly waiting forever (with small thread pauses) for new events.
            </summary>
        </member>
        <member name="M:Kafkaesque.LogReader.ReadEof(System.Int32,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Initiates a read operation. Optionally resumes from a specific file number/byte position.
            Reading is cancelled when the <paramref name="cancellationToken"/> is signaled. If <paramref name="throwWhenCancelled"/> is true,
            an <see cref="T:System.OperationCanceledException"/> is thrown upon cancellation - if it's false, then the iterator simply breaks.
            When no more events can be read, the special <see cref="F:Kafkaesque.LogReader.EOF"/> object is returned, leaving the decision of what to do to the caller.
            </summary>
        </member>
        <member name="T:Kafkaesque.LogWriter">
            <summary>
            Log writer for writing logs :)
            </summary>
        </member>
        <member name="M:Kafkaesque.LogWriter.WriteAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Enqueues a write operation for the given <paramref name="data"/>, returning a <see cref="T:System.Threading.Tasks.Task"/> for its completion.
            </summary>
        </member>
        <member name="M:Kafkaesque.LogWriter.WriteManyAsync(System.Collections.Generic.IEnumerable{System.Byte[]},System.Threading.CancellationToken)">
            <summary>
            Enqueues write operations for the given <paramref name="dataSequence"/>, returning a <see cref="T:System.Threading.Tasks.Task"/> for its completion.
            </summary>
        </member>
        <member name="M:Kafkaesque.LogWriter.Dispose">
            <summary>
            Disposes the writer, giving the background writer task up to 3 s to finish writing
            </summary>
        </member>
        <member name="T:Kafkaesque.Settings">
            <summary>
            Configures how Kafkaesque should do its thing
            </summary>
        </member>
        <member name="P:Kafkaesque.Settings.WriteLockAcquisitionTimeoutSeconds">
            <summary>
            Gets how long (in seconds) the writer should accept waiting to acquire the write lock.
            </summary>
        </member>
        <member name="P:Kafkaesque.Settings.ApproximateMaximumFileLength">
            <summary>
            Gets the approximate size (in bytes) of how big files can get. This is an approximate value, as contents will flow into a new file
            whenever this value has been crossed, but – depending on the size of the written chunk of data – the file can end up slightly bigger
            than this limit.
            </summary>
        </member>
        <member name="P:Kafkaesque.Settings.NumberOfFilesToKeep">
            <summary>
            Gets how many files Kafkaesque should aim to keep as history in the log directory.
            </summary>
        </member>
        <member name="P:Kafkaesque.Settings.Logger">
            <summary>
            Gets the logger to use for logging
            </summary>
        </member>
        <member name="M:Kafkaesque.Settings.#ctor(System.Int32,System.Int64,System.Int32,Kafkaesque.ILogger)">
            <summary>
            Creates the settings
            </summary>
        </member>
    </members>
</doc>
